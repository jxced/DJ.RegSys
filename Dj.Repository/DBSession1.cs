//------------------------------------------------------------------------------
// <auto-generated>
// 数据仓储，作用：
// 1.调用EF容器 批量 执行 sql语句
// 2.方便通过 子接口属性直接 获取 对应数据表的操作接口对象
// </auto-generated>
//------------------------------------------------------------------------------

namespace DJ.Repository
{
    using System;
    public partial class DBSession:DJ.IRepository.IDBSession
    {
    	DJ.IRepository.IClassInfoDAL  _ClassInfoDAL;
        public DJ.IRepository.IClassInfoDAL  ClassInfoDAL
    	{
    		get
    		{
    			if(_ClassInfoDAL==null)
    			{
    				_ClassInfoDAL=new ClassInfoDAL();
    			}
    			return _ClassInfoDAL;
    		}
    	}
    	DJ.IRepository.ICourseTypeDAL  _CourseTypeDAL;
        public DJ.IRepository.ICourseTypeDAL  CourseTypeDAL
    	{
    		get
    		{
    			if(_CourseTypeDAL==null)
    			{
    				_CourseTypeDAL=new CourseTypeDAL();
    			}
    			return _CourseTypeDAL;
    		}
    	}
    	DJ.IRepository.ISpecialtyDAL  _SpecialtyDAL;
        public DJ.IRepository.ISpecialtyDAL  SpecialtyDAL
    	{
    		get
    		{
    			if(_SpecialtyDAL==null)
    			{
    				_SpecialtyDAL=new SpecialtyDAL();
    			}
    			return _SpecialtyDAL;
    		}
    	}
    	DJ.IRepository.IStudentInfoDAL  _StudentInfoDAL;
        public DJ.IRepository.IStudentInfoDAL  StudentInfoDAL
    	{
    		get
    		{
    			if(_StudentInfoDAL==null)
    			{
    				_StudentInfoDAL=new StudentInfoDAL();
    			}
    			return _StudentInfoDAL;
    		}
    	}
    	DJ.IRepository.IStudents_SubjectsDAL  _Students_SubjectsDAL;
        public DJ.IRepository.IStudents_SubjectsDAL  Students_SubjectsDAL
    	{
    		get
    		{
    			if(_Students_SubjectsDAL==null)
    			{
    				_Students_SubjectsDAL=new Students_SubjectsDAL();
    			}
    			return _Students_SubjectsDAL;
    		}
    	}
    	DJ.IRepository.ISubjectsDAL  _SubjectsDAL;
        public DJ.IRepository.ISubjectsDAL  SubjectsDAL
    	{
    		get
    		{
    			if(_SubjectsDAL==null)
    			{
    				_SubjectsDAL=new SubjectsDAL();
    			}
    			return _SubjectsDAL;
    		}
    	}
    	DJ.IRepository.IUserCategoryDAL  _UserCategoryDAL;
        public DJ.IRepository.IUserCategoryDAL  UserCategoryDAL
    	{
    		get
    		{
    			if(_UserCategoryDAL==null)
    			{
    				_UserCategoryDAL=new UserCategoryDAL();
    			}
    			return _UserCategoryDAL;
    		}
    	}
    	DJ.IRepository.IUserInfoDAL  _UserInfoDAL;
        public DJ.IRepository.IUserInfoDAL  UserInfoDAL
    	{
    		get
    		{
    			if(_UserInfoDAL==null)
    			{
    				_UserInfoDAL=new UserInfoDAL();
    			}
    			return _UserInfoDAL;
    		}
    	}
    	DJ.IRepository.ISubject_CuorseDAL  _Subject_CuorseDAL;
        public DJ.IRepository.ISubject_CuorseDAL  Subject_CuorseDAL
    	{
    		get
    		{
    			if(_Subject_CuorseDAL==null)
    			{
    				_Subject_CuorseDAL=new Subject_CuorseDAL();
    			}
    			return _Subject_CuorseDAL;
    		}
    	}
    	DJ.IRepository.ITeacher_SubjectDAL  _Teacher_SubjectDAL;
        public DJ.IRepository.ITeacher_SubjectDAL  Teacher_SubjectDAL
    	{
    		get
    		{
    			if(_Teacher_SubjectDAL==null)
    			{
    				_Teacher_SubjectDAL=new Teacher_SubjectDAL();
    			}
    			return _Teacher_SubjectDAL;
    		}
    	}
    	DJ.IRepository.ITeacherInfoDAL  _TeacherInfoDAL;
        public DJ.IRepository.ITeacherInfoDAL  TeacherInfoDAL
    	{
    		get
    		{
    			if(_TeacherInfoDAL==null)
    			{
    				_TeacherInfoDAL=new TeacherInfoDAL();
    			}
    			return _TeacherInfoDAL;
    		}
    	}
    }
}
